import eslintJsonPlugin from '@eslint/json';
import noRelativeImportPaths from '@gitbutler/no-relative-imports';
import errorCause from 'eslint-plugin-error-cause';
import eslintCommentsPlugin from 'eslint-plugin-eslint-comments';
import importPlugin from 'eslint-plugin-import';
import packageJson from 'eslint-plugin-package-json';
import perfectionist from 'eslint-plugin-perfectionist';
import promisePlugin from 'eslint-plugin-promise';
import sonarJsPlugin from 'eslint-plugin-sonarjs';
import unicornPlugin from 'eslint-plugin-unicorn';
import globals from 'globals';
import jsoncParser from 'jsonc-eslint-parser';
import tseslint from 'typescript-eslint';

export default tseslint.config([
    {
        ignores: [
            '**/node_modules/**',
            '**/dist/**',
            '**/build/**',
            '**/coverage/**',
            '**/.next/**',
            '**/out/**',
            '**/.eslintcache',
            'package-lock.json',
            'pnpm-lock.yaml',
            '**/tsconfig.json',
            '**/playwright-report/**',
        ],
    },
    {
        files: ['src/**/*.ts', 'src/**/*.tsx', 'src/**/*.js', 'src/**/*.jsx'],
        plugins: {
            unicorn: unicornPlugin,
            import: importPlugin,
            'eslint-comments': eslintCommentsPlugin,
            sonarjs: sonarJsPlugin,
            promise: promisePlugin,
            'error-cause': errorCause,
            '@typescript-eslint': tseslint.plugin,
            'no-relative-import-paths': noRelativeImportPaths,
            perfectionist,
        },
        languageOptions: {
            parser: tseslint.parser,
            globals: {
                ...globals.browser,
                ...globals.node,
            },
            parserOptions: {
                project: './tsconfig.json',
                tsconfigRootDir: import.meta.dirname,
                ecmaVersion: 'latest',
                ecmaFeatures: {
                    jsx: true,
                },
                sourceType: 'module',
            },
        },
        linterOptions: {
            reportUnusedDisableDirectives: 'warn',
        },
        rules: {
            // Possible Errors
            'array-callback-return': [
                'error',
                { allowImplicit: true, checkForEach: true },
            ],
            'constructor-super': 'off', // handled by typescript compiler
            'for-direction': 'error',
            'getter-return': 'off', // handled by typescript compiler
            'no-async-promise-executor': 'error',
            'no-await-in-loop': 'off',
            'no-class-assign': 'off', // handled by typescript compiler
            'no-compare-neg-zero': 'warn',
            'no-cond-assign': ['error', 'except-parens'],
            'no-const-assign': 'off', // handled by typescript compiler
            'no-constant-binary-expression': 'error',
            'no-constant-condition': [
                'error',
                { checkLoops: 'allExceptWhileTrue' },
            ],
            'no-constructor-return': 'warn',
            'no-control-regex': 'warn',
            'no-debugger': 'warn',
            'no-dupe-args': 'off', // handled by typescript compiler
            'no-dupe-class-members': 'off', // typescript compiler handles this
            'no-dupe-else-if': 'error',
            'no-dupe-keys': 'off', // handled by typescript compiler
            'no-duplicate-case': 'error',
            'no-duplicate-imports': ['error', { includeExports: true }],
            'no-empty-character-class': 'error',
            'no-empty-pattern': 'error',
            'no-ex-assign': 'error',
            'no-fallthrough': [
                'error',
                { allowEmptyCase: true, reportUnusedFallthroughComment: true },
            ],
            'no-func-assign': 'off', // handled by typescript compiler
            'no-import-assign': 'warn',
            'no-inner-declarations': 'off', // would only affect older ecma versions
            'no-invalid-regexp': 'error',
            'no-irregular-whitespace': ['warn', { skipStrings: false }],
            'no-loss-of-precision': 'warn',
            'no-misleading-character-class': 'error',
            'no-new-native-nonconstructor': 'off', // handled by typescript compiler
            'no-obj-calls': 'off', // handled by typescript compiler
            'no-promise-executor-return': 'error',
            'no-prototype-builtins': 'warn',
            'no-self-assign': 'error',
            'no-self-compare': 'error',
            'no-setter-return': 'off', // handled by typescript compiler
            'no-sparse-arrays': 'error',
            'no-template-curly-in-string': 'error',
            'no-this-before-super': 'off', // handled by typescript compiler
            'no-unassigned-vars': 'warn',
            'no-undef': 'off', // handled by typescript compiler
            'no-unexpected-multiline': 'error',
            'no-unmodified-loop-condition': 'error',
            'no-unreachable': 'off', // handled by typescript compiler
            'no-unreachable-loop': 'error',
            'no-unsafe-finally': 'error',
            'no-unsafe-negation': 'off', // handled by typescript compiler
            'no-unsafe-optional-chaining': [
                'error',
                { disallowArithmeticOperators: true },
            ],
            'no-unused-private-class-members': 'error',
            'no-unused-vars': 'off', // handled by @typescript-eslint/no-unused-vars
            'no-use-before-define': 'off', // handled by @typescript-eslint/no-use-before-define
            'no-useless-assignment': 'error',
            'no-useless-backreference': 'error',
            'require-atomic-updates': 'warn',
            'use-isnan': [
                'error',
                { enforceForSwitchCase: true, enforceForIndexOf: true },
            ],
            'valid-typeof': ['error', { requireStringLiterals: true }],
            // Best Practices
            'accessor-pairs': 'error',
            'arrow-body-style': [
                'error',
                'as-needed',
                { requireReturnForObjectLiteral: true },
            ],
            'block-scoped-var': 'error',
            camelcase: ['error', { properties: 'never' }],
            'capitalized-comments': 'off',
            'class-methods-use-this': 'off', // handled by @typescript-eslint/class-methods-use-this
            complexity: ['warn', { max: 20, variant: 'modified' }],
            'consistent-return': 'off', // handled by @typescript-eslint/consistent-type-assertions
            'consistent-this': ['warn', 'self'],
            curly: ['warn', 'all'],
            'default-case': 'error',
            'default-case-last': 'error',
            'default-param-last': 'off', // handled by @typescript-eslint/default-param-last
            'dot-notation': 'off', // handled by @typescript-eslint/dot-notation
            eqeqeq: ['error', 'always', { null: 'ignore' }],
            'func-name-matching': [
                'warn',
                { considerPropertyDescriptor: true },
            ],
            'func-names': ['warn', 'as-needed'],
            'func-style': [
                'warn',
                'declaration',
                { allowArrowFunctions: true },
            ],
            'grouped-accessor-pairs': ['warn', 'getBeforeSet'],
            'guard-for-in': 'error',
            'id-denylist': 'off',
            'id-length': 'off',
            'id-match': 'off',
            'init-declarations': 'off',
            'logical-assignment-operators': [
                'warn',
                'always',
                { enforceForIfStatements: true },
            ],
            'max-classes-per-file': 'off',
            'max-depth': ['warn', { max: 4 }],
            'max-lines': 'off',
            'max-lines-per-function': 'off',
            'max-nested-callbacks': ['warn', { max: 4 }],
            'max-params': 'off',
            'max-statements': 'off',
            'new-cap': 'warn',
            'no-alert': 'warn',
            'no-array-constructor': 'off', // handled by @typescript-eslint/no-array-constructor
            'no-bitwise': 'off',
            'no-caller': 'error',
            'no-case-declarations': 'error',
            'no-console': 'warn',
            'no-continue': 'off',
            'no-delete-var': 'error',
            'no-div-regex': 'error',
            'no-else-return': ['error', { allowElseIf: true }],
            'no-empty': ['error', { allowEmptyCatch: false }],
            'no-empty-function': 'off', // handled by @typescript-eslint/no-empty-function
            'no-empty-static-block': 'error',
            'no-eq-null': 'off', // handled by eqeqeq rule
            'no-eval': 'error',
            'no-extend-native': 'error',
            'no-extra-bind': 'error',
            'no-extra-boolean-cast': [
                'warn',
                { enforceForInnerExpressions: true },
            ],
            'no-extra-label': 'error',
            'no-global-assign': 'error',
            'no-implicit-coercion': [
                'warn',
                {
                    boolean: true,
                    number: true,
                    string: true,
                    disallowTemplateShorthand: true,
                },
            ],
            'no-implicit-globals': ['warn', { lexicalBindings: true }], // this should not happen if using type module
            'no-implied-eval': 'off', // handled by @typescript-eslint/no-implied-eval
            'no-inline-comments': 'off',
            'no-invalid-this': 'off', // handled by typescript compiler
            'no-iterator': 'error',
            'no-label-var': 'error',
            'no-labels': 'error',
            'no-lone-blocks': 'error',
            'no-lonely-if': 'error',
            'no-loop-func': 'off', // handled by @typescript-eslint/no-loop-func
            'no-magic-numbers': 'off',
            'no-multi-assign': 'warn',
            'no-multi-str': 'error',
            'no-negated-condition': 'off', // handled by unicorn/no-negated-condition (auto fixable)
            'no-nested-ternary': 'off', // handled by unicorn/no-nested-ternary
            'no-new': 'error',
            'no-new-func': 'error',
            'no-new-wrappers': 'error',
            'no-nonoctal-decimal-escape': 'warn',
            'no-object-constructor': 'error',
            'no-octal': 'warn',
            'no-octal-escape': 'error',
            'no-param-reassign': 'warn',
            'no-plusplus': ['warn', { allowForLoopAfterthoughts: true }],
            'no-proto': 'error',
            'no-redeclare': 'off', // handled by typescript compiler
            'no-regex-spaces': 'error',
            'no-restricted-exports': 'off',
            'no-restricted-globals': 'off',
            'no-restricted-imports': 'off',
            'no-restricted-properties': 'off',
            'no-restricted-syntax': 'off',
            'no-return-assign': ['error', 'always'],
            'no-script-url': 'error',
            'no-sequences': ['error', { allowInParentheses: false }],
            'no-shadow': 'off', // handled by @typescript-eslint/no-shadow
            'no-shadow-restricted-names': 'error',
            'no-ternary': 'off',
            'no-throw-literal': 'off', // handled by @typescript-eslint/only-throw-error
            'no-undef-init': 'error',
            'no-undefined': 'off',
            'no-underscore-dangle': [
                'error',
                { enforceInClassFields: true, enforceInMethodNames: true },
            ],
            'no-unneeded-ternary': ['warn', { defaultAssignment: false }],
            'no-unused-expressions': 'off', // handled by @typescript-eslint/no-unused-expressions
            'no-unused-labels': 'error',
            'no-useless-call': 'error',
            'no-useless-catch': 'error',
            'no-useless-computed-key': 'warn',
            'no-useless-concat': 'error',
            'no-useless-constructor': 'off', // handled by @typescript-eslint/no-useless-constructor
            'no-useless-escape': 'warn',
            'no-useless-rename': 'error',
            'no-useless-return': 'warn',
            'no-var': 'error',
            'no-void': 'warn',
            'no-warning-comments': [
                'warn',
                { terms: ['todo', 'fixme'], location: 'start' },
            ],
            'no-with': 'error',
            'object-shorthand': [
                'error',
                'always',
                { avoidQuotes: true, avoidExplicitReturnArrows: true },
            ],
            'one-var': ['error', 'never'],
            'operator-assignment': 'off',
            'prefer-arrow-callback': ['warn', { allowUnboundThis: false }],
            'prefer-const': [
                'error',
                { destructuring: 'all', ignoreReadBeforeAssign: true },
            ],
            'prefer-destructuring': 'off',
            'prefer-exponentiation-operator': 'error',
            'prefer-named-capture-group': 'warn',
            'prefer-numeric-literals': 'off',
            'prefer-object-has-own': 'error',
            'prefer-object-spread': 'error',
            'prefer-promise-reject-errors': 'off', // handled by @typescript-eslint/prefer-promise-reject-errors
            'prefer-regex-literals': [
                'error',
                { disallowRedundantWrapping: true },
            ],
            'prefer-rest-params': 'error',
            'prefer-spread': 'error',
            'prefer-template': 'error',
            radix: 'warn',
            'require-await': 'off', // handled by @typescript-eslint/require-await
            'require-unicode-regexp': 'warn',
            'require-yield': 'error',
            'sort-imports': [
                'off', // handled by import/order
                {
                    ignoreCase: true,
                    ignoreDeclarationSort: false,
                    ignoreMemberSort: false,
                    memberSyntaxSortOrder: [
                        'none',
                        'single',
                        'multiple',
                        'all',
                    ],
                    allowSeparatedGroups: true,
                },
            ],
            'sort-keys': [
                'off',
                'asc',
                { caseSensitive: false, natural: true },
            ],
            'sort-vars': 'off',
            strict: 'off',
            'symbol-description': 'error',
            'unicode-bom': 'off',
            'vars-on-top': 'off',
            yoda: ['error', 'never', { exceptRange: true }],
            // Unicorn rules
            'unicorn/better-regex': ['warn', { sortCharacterClasses: true }],
            'unicorn/catch-error-name': [
                'warn',
                { name: 'error', ignore: [/err/u] },
            ],
            'unicorn/consistent-assert': 'warn',
            'unicorn/consistent-date-clone': 'warn',
            'unicorn/consistent-destructuring': 'warn',
            'unicorn/consistent-empty-array-spread': 'error',
            'unicorn/consistent-existence-index-check': 'warn',
            'unicorn/consistent-function-scoping': [
                'error',
                { checkArrowFunctions: true },
            ],
            'unicorn/custom-error-definition': 'error',
            'unicorn/empty-brace-spaces': 'warn',
            'unicorn/error-message': 'error',
            'unicorn/escape-case': ['warn', 'uppercase'],
            'unicorn/expiring-todo-comments': 'off',
            'unicorn/explicit-length-check': 'warn',
            'unicorn/filename-case': [
                'warn',
                { cases: { kebabCase: true, camelCase: true } },
            ],
            'unicorn/import-style': 'off',
            'unicorn/new-for-builtins': 'warn',
            'unicorn/no-abusive-eslint-disable': 'warn',
            'unicorn/no-accessor-recursion': 'error',
            'unicorn/no-anonymous-default-export': 'warn',
            'unicorn/no-array-callback-reference': 'warn',
            'unicorn/no-array-for-each': 'warn',
            'unicorn/no-array-method-this-argument': 'error',
            'unicorn/no-array-reduce': [
                'warn',
                { allowSimpleOperations: true },
            ],
            'unicorn/no-await-expression-member': 'warn',
            'unicorn/no-await-in-promise-methods': 'error',
            'unicorn/no-console-spaces': 'warn',
            'unicorn/no-document-cookie': 'error',
            'unicorn/no-empty-file': 'warn',
            'unicorn/no-for-loop': 'warn',
            'unicorn/no-hex-escape': 'warn',
            'unicorn/no-instanceof-builtins': 'error',
            'unicorn/no-invalid-fetch-options': 'error',
            'unicorn/no-invalid-remove-event-listener': 'error',
            'unicorn/no-keyword-prefix': 'off',
            'unicorn/no-lonely-if': 'error',
            'unicorn/no-magic-array-flat-depth': 'warn',
            'unicorn/no-named-default': 'warn',
            'unicorn/no-negated-condition': 'warn',
            'unicorn/no-negation-in-equality-check': 'error',
            'unicorn/no-nested-ternary': 'warn',
            'unicorn/no-new-array': 'warn',
            'unicorn/no-new-buffer': 'error',
            'unicorn/no-null': 'off',
            'unicorn/no-object-as-default-parameter': 'warn',
            'unicorn/no-process-exit': 'error',
            'unicorn/no-single-promise-in-promise-methods': 'warn',
            'unicorn/no-static-only-class': 'error',
            'unicorn/no-thenable': 'error',
            'unicorn/no-this-assignment': 'warn',
            'unicorn/no-typeof-undefined': 'error',
            'unicorn/no-unnecessary-array-flat-depth': 'warn',
            'unicorn/no-unnecessary-array-splice-count': 'warn',
            'unicorn/no-unnecessary-await': 'error',
            'unicorn/no-unnecessary-polyfills': [
                'error',
                {
                    targets: 'node >=20',
                },
            ],
            'unicorn/no-unnecessary-slice-end': 'warn',
            'unicorn/no-unreadable-array-destructuring': 'warn',
            'unicorn/no-unreadable-iife': 'error',
            'unicorn/no-unused-properties': 'warn',
            'unicorn/no-useless-fallback-in-spread': 'warn',
            'unicorn/no-useless-length-check': 'warn',
            'unicorn/no-useless-promise-resolve-reject': 'error',
            'unicorn/no-useless-spread': 'error',
            'unicorn/no-useless-switch-case': 'error',
            'unicorn/no-useless-undefined': 'warn',
            'unicorn/no-zero-fractions': 'error',
            'unicorn/number-literal-case': 'warn',
            'unicorn/numeric-separators-style': 'warn',
            'unicorn/prefer-add-event-listener': 'warn',
            'unicorn/prefer-array-find': ['error', { checkFromLast: true }],
            'unicorn/prefer-array-flat': 'warn',
            'unicorn/prefer-array-flat-map': 'warn',
            'unicorn/prefer-array-index-of': 'warn',
            'unicorn/prefer-array-some': 'warn',
            'unicorn/prefer-at': ['warn', { checkAllIndexAccess: true }],
            'unicorn/prefer-blob-reading-methods': 'error',
            'unicorn/prefer-code-point': 'error',
            'unicorn/prefer-date-now': 'error',
            'unicorn/prefer-default-parameters': 'warn',
            'unicorn/prefer-dom-node-append': 'error',
            'unicorn/prefer-dom-node-dataset': 'warn',
            'unicorn/prefer-dom-node-remove': 'error',
            'unicorn/prefer-dom-node-text-content': 'error',
            'unicorn/prefer-event-target': 'warn',
            'unicorn/prefer-export-from': [
                'warn',
                { ignoreUsedVariables: true },
            ],
            'unicorn/prefer-global-this': 'warn',
            'unicorn/prefer-import-meta-properties': 'error',
            'unicorn/prefer-includes': 'warn',
            'unicorn/prefer-json-parse-buffer': 'off',
            'unicorn/prefer-keyboard-event-key': 'error',
            'unicorn/prefer-logical-operator-over-ternary': 'warn',
            'unicorn/prefer-math-min-max': 'error',
            'unicorn/prefer-math-trunc': 'warn',
            'unicorn/prefer-modern-dom-apis': 'error',
            'unicorn/prefer-modern-math-apis': 'error',
            'unicorn/prefer-module': 'warn',
            'unicorn/prefer-native-coercion-functions': 'error',
            'unicorn/prefer-negative-index': 'warn',
            'unicorn/prefer-node-protocol': 'warn',
            'unicorn/prefer-number-properties': [
                'warn',
                { checkInfinity: true },
            ],
            'unicorn/prefer-object-from-entries': 'error',
            'unicorn/prefer-optional-catch-binding': 'warn',
            'unicorn/prefer-prototype-methods': 'warn',
            'unicorn/prefer-query-selector': 'error',
            'unicorn/prefer-reflect-apply': 'warn',
            'unicorn/prefer-regexp-test': 'error',
            'unicorn/prefer-set-has': 'warn',
            'unicorn/prefer-set-size': 'error',
            'unicorn/prefer-single-call': 'warn',
            'unicorn/prefer-spread': 'error',
            'unicorn/prefer-string-raw': 'error',
            'unicorn/prefer-string-replace-all': 'error',
            'unicorn/prefer-string-slice': 'error',
            'unicorn/prefer-string-starts-ends-with': 'error',
            'unicorn/prefer-string-trim-start-end': 'error',
            'unicorn/prefer-structured-clone': 'error',
            'unicorn/prefer-switch': [
                'warn',
                { minimumCases: 4, emptyDefaultCase: 'do-nothing-comment' },
            ],
            'unicorn/prefer-ternary': 'error',
            'unicorn/prefer-top-level-await': 'warn',
            'unicorn/prefer-type-error': 'warn',
            'unicorn/prevent-abbreviations': 'off',
            'unicorn/relative-url-style': ['warn', 'always'],
            'unicorn/require-array-join-separator': 'warn',
            'unicorn/require-number-to-fixed-digits-argument': 'error',
            'unicorn/require-post-message-target-origin': 'warn',
            'unicorn/string-content': 'off',
            'unicorn/switch-case-braces': 'warn',
            'unicorn/template-indent': [
                'warn',
                {
                    tags: ['outdent', 'dedent', 'gql', 'sql', 'html', 'styled'],
                    functions: ['dedent', 'stripIndent'],
                    selectors: ['TemplateLiteral'],
                    comments: ['HTML', 'indent'],
                },
            ],
            'unicorn/text-encoding-identifier-case': 'warn',
            'unicorn/throw-new-error': 'error',
            // Import rules
            'import/export': 'error',
            'import/no-deprecated': 'warn',
            'import/no-empty-named-blocks': 'error',
            'import/no-extraneous-dependencies': 'off',
            'import/no-mutable-exports': 'error',
            'import/no-named-as-default': 'error',
            'import/no-named-as-default-member': 'error',
            'import/no-unused-modules': 'warn',
            'import/no-amd': 'error',
            'import/no-commonjs': [
                'warn',
                {
                    allowRequire: false,
                    allowConditionalRequire: false,
                    allowPrimitiveModules: false,
                },
            ],
            'import/no-import-module-exports': 'warn',
            'import/no-nodejs-modules': 'off',
            'import/unambiguous': 'warn',
            'import/default': 'error',
            'import/prefer-node-protocol': 'off', // handled by unicorn/prefer-node-protocol
            'import/named': 'warn',
            'import/namespace': 'warn',
            'import/no-absolute-path': 'error',
            'import/no-cycle': 'off',
            'import/no-dynamic-require': 'warn',
            'import/no-internal-modules': 'off',
            'import/no-relative-packages': 'off',
            'import/no-relative-parent-imports': 'off',
            'import/no-restricted-paths': 'off',
            'import/no-self-import': 'error',
            'import/no-unresolved': 'off', // gives a lot of false positives with bundlers
            'import/no-useless-path-segments': 'error',
            'import/no-webpack-loader-syntax': 'warn',
            'import/consistent-type-specifier-style': 'off', // handled by typescript
            'import/dynamic-import-chunkname': 'off',
            'import/exports-last': 'off',
            'import/extensions': 'off',
            'import/first': 'error',
            'import/group-exports': 'off',
            'import/max-dependencies': [
                'warn',
                { max: 15, ignoreTypeImports: true },
            ],
            'import/newline-after-import': 'error',
            'import/no-anonymous-default-export': 'warn',
            'import/no-default-export': 'off',
            'import/no-duplicates': 'warn',
            'import/no-named-default': 'error',
            'import/no-named-export': 'off',
            'import/no-namespace': 'off',
            'import/no-unassigned-import': 'off',
            'import/order': [
                'warn',
                {
                    groups: [
                        'builtin',
                        'external',
                        'internal',
                        'parent',
                        'sibling',
                        'index',
                        'type',
                    ],
                    pathGroups: [
                        {
                            pattern: '@/**',
                            group: 'internal',
                            position: 'before',
                        },
                    ],
                    pathGroupsExcludedImportTypes: [
                        'builtin',
                        'external',
                        'object',
                    ],
                    distinctGroup: true,
                    'newlines-between': 'always',
                    alphabetize: {
                        order: 'asc',
                        orderImportKind: 'asc',
                        caseInsensitive: true,
                    },
                    named: { enabled: true, types: 'types-first' },
                    warnOnUnassignedImports: true,
                },
            ],
            'import/prefer-default-export': 'off',
            // ESLint Comments rules
            'eslint-comments/disable-enable-pair': [
                'error',
                { allowWholeFile: true },
            ],
            'eslint-comments/no-aggregating-enable': 'warn',
            'eslint-comments/no-duplicate-disable': 'error',
            'eslint-comments/no-unlimited-disable': 'warn',
            'eslint-comments/no-unused-disable': 'warn',
            'eslint-comments/no-unused-enable': 'error',
            'eslint-comments/no-restricted-disable': 'off',
            'eslint-comments/no-use': 'off',
            'eslint-comments/require-description': 'warn',
            // SonarJS rules
            'sonarjs/anchor-precedence': 'warn',
            'sonarjs/argument-type': 'off', // handled by typescript compiler
            'sonarjs/bitwise-operators': 'warn',
            'sonarjs/bool-param-default': 'warn',
            'sonarjs/class-name': 'error',
            'sonarjs/class-prototype': 'error',
            'sonarjs/cognitive-complexity': ['warn', 8],
            'sonarjs/concise-regex': 'warn',
            'sonarjs/constructor-for-side-effects': 'warn',
            'sonarjs/content-length': 'warn',
            'sonarjs/content-security-policy': 'error',
            'sonarjs/cookie-no-httponly': 'warn',
            'sonarjs/cors': 'warn',
            'sonarjs/csrf': 'error',
            'sonarjs/cyclomatic-complexity': ['warn', { threshold: 15 }],
            'sonarjs/duplicates-in-character-class': 'error',
            'sonarjs/elseif-without-else': 'off', // not great if the last statement is a return
            'sonarjs/empty-string-repetition': 'warn',
            'sonarjs/encryption-secure-mode': 'error',
            'sonarjs/existing-groups': 'error',
            'sonarjs/expression-complexity': ['warn', { max: 4 }],
            'sonarjs/file-header': 'off',
            'sonarjs/file-name-differ-from-class': 'warn',
            'sonarjs/file-uploads': 'warn',
            'sonarjs/frame-ancestors': 'warn',
            'sonarjs/hashing': 'error',
            'sonarjs/insecure-cookie': 'error',
            'sonarjs/insecure-jwt-token': 'error',
            'sonarjs/jsx-no-leaked-render': 'warn', // frontend to be used in React projects
            'sonarjs/link-with-target-blank': 'warn',
            'sonarjs/max-lines': 'off',
            'sonarjs/max-lines-per-function': 'off',
            'sonarjs/max-switch-cases': ['warn', 15],
            'sonarjs/no-all-duplicated-branches': 'error',
            'sonarjs/no-alphabetical-sort': 'warn',
            'sonarjs/no-array-delete': 'error',
            'sonarjs/no-async-constructor': 'error',
            'sonarjs/no-clear-text-protocols': 'warn',
            'sonarjs/no-collapsible-if': 'warn',
            'sonarjs/no-collection-size-mischeck': 'warn',
            'sonarjs/no-dead-store': 'warn',
            'sonarjs/no-duplicate-string': 'off',
            'sonarjs/no-duplicated-branches': 'error',
            'sonarjs/no-element-overwrite': 'warn',
            'sonarjs/no-empty-after-reluctant': 'warn',
            'sonarjs/no-empty-alternatives': 'error',
            'sonarjs/no-empty-collection': 'warn',
            'sonarjs/no-empty-group': 'error',
            'sonarjs/no-equals-in-for-termination': 'warn',
            'sonarjs/no-exclusive-tests': 'warn',
            'sonarjs/no-extra-arguments': 'error',
            'sonarjs/no-function-declaration-in-block': 'error',
            'sonarjs/no-global-this': 'error',
            'sonarjs/no-gratuitous-expressions': 'error',
            'sonarjs/no-hardcoded-ip': 'warn',
            'sonarjs/no-hardcoded-passwords': 'error',
            'sonarjs/no-hardcoded-secrets': 'error',
            'sonarjs/no-identical-conditions': 'error',
            'sonarjs/no-identical-expressions': 'error',
            'sonarjs/no-identical-functions': 'error',
            'sonarjs/no-ignored-exceptions': 'warn',
            'sonarjs/no-ignored-return': 'error',
            'sonarjs/no-implicit-dependencies': 'warn',
            'sonarjs/no-implicit-global': 'warn',
            'sonarjs/no-inconsistent-returns': 'off', // handled by typescript compiler
            'sonarjs/no-invariant-returns': 'warn',
            'sonarjs/no-inverted-boolean-check': 'warn',
            'sonarjs/no-literal-call': 'error',
            'sonarjs/no-misleading-array-reverse': 'warn',
            'sonarjs/no-nested-switch': 'warn',
            'sonarjs/no-nested-template-literals': 'warn',
            'sonarjs/no-one-iteration-loop': 'error',
            'sonarjs/no-redundant-boolean': 'warn',
            'sonarjs/no-redundant-jump': 'off',
            'sonarjs/no-same-line-conditional': 'error',
            'sonarjs/no-small-switch': 'error',
            'sonarjs/no-unused-collection': 'warn',
            'sonarjs/no-unused-function-argument': 'warn',
            'sonarjs/no-use-of-empty-return-value': 'warn',
            'sonarjs/no-useless-catch': 'off', // handled by no-useless-catch
            'sonarjs/no-useless-increment': 'warn',
            'sonarjs/non-existent-operator': 'warn',
            'sonarjs/null-dereference': 'error',
            'sonarjs/operation-returning-nan': 'error',
            'sonarjs/post-message': 'warn',
            'sonarjs/prefer-immediate-return': 'off',
            'sonarjs/prefer-object-literal': 'warn',
            'sonarjs/prefer-single-boolean-return': 'error',
            'sonarjs/prefer-type-guard': 'warn',
            'sonarjs/prefer-while': 'error',
            'sonarjs/public-static-readonly': 'warn',
            'sonarjs/reduce-initial-value': 'warn',
            'sonarjs/stateful-regex': 'warn',
            // Promise rules
            'promise/always-return': 'error',
            'promise/avoid-new': 'off',
            'promise/catch-or-return': ['error', { allowFinally: true }],
            'promise/no-callback-in-promise': 'warn',
            'promise/no-multiple-resolved': 'warn',
            'promise/no-native': 'off',
            'promise/no-nesting': 'error',
            'promise/no-new-statics': 'error',
            'promise/no-promise-in-callback': 'warn',
            'promise/no-return-in-finally': 'error',
            'promise/no-return-wrap': 'error',
            'promise/param-names': 'error',
            'promise/prefer-await-to-callbacks': 'warn',
            'promise/prefer-await-to-then': 'off',
            'promise/prefer-catch': 'warn',
            'promise/spec-only': 'error',
            'promise/valid-params': 'error',
            // TypeScript rules
            '@typescript-eslint/adjacent-overload-signatures': 'off', // conflicts with perfectionist/sort-interfaces
            '@typescript-eslint/array-type': [
                'warn',
                { default: 'array-simple' },
            ],
            '@typescript-eslint/await-thenable': 'warn',
            '@typescript-eslint/ban-ts-comment': [
                'warn',
                {
                    'ts-expect-error': 'allow-with-description',
                    'ts-ignore': 'allow-with-description',
                    'ts-nocheck': 'allow-with-description',
                    'ts-check': 'allow-with-description',
                    minimumDescriptionLength: 5,
                },
            ],
            '@typescript-eslint/ban-tslint-comment': 'warn',
            '@typescript-eslint/class-methods-use-this': 'error',
            '@typescript-eslint/consistent-return': 'off', // handled by tsconfig noImplicitReturns
            '@typescript-eslint/no-restricted-types': 'off',
            '@typescript-eslint/no-wrapper-object-types': 'error',
            '@typescript-eslint/no-unsafe-function-type': 'error',
            '@typescript-eslint/no-empty-object-type': [
                'error',
                { allowWithName: 'Props$' },
            ],
            '@typescript-eslint/consistent-generic-constructors': [
                'error',
                'constructor',
            ],
            '@typescript-eslint/consistent-indexed-object-style': 'warn',
            '@typescript-eslint/consistent-type-assertions': [
                'warn',
                {
                    assertionStyle: 'as',
                    objectLiteralTypeAssertions: 'never',
                    arrayLiteralTypeAssertions: 'never',
                },
            ],
            '@typescript-eslint/consistent-type-definitions': [
                'warn',
                'interface',
            ],
            '@typescript-eslint/consistent-type-exports': 'error',
            '@typescript-eslint/consistent-type-imports': 'off', // conflicts with verbatimModuleSyntax tsconfig option
            '@typescript-eslint/explicit-module-boundary-types': [
                'error',
                { allowHigherOrderFunctions: false },
            ],
            '@typescript-eslint/method-signature-style': ['error', 'property'],
            '@typescript-eslint/no-base-to-string': 'error',
            '@typescript-eslint/no-confusing-non-null-assertion': 'warn',
            '@typescript-eslint/no-confusing-void-expression': [
                'error',
                { ignoreArrowShorthand: true },
            ],
            '@typescript-eslint/no-duplicate-enum-values': 'error',
            '@typescript-eslint/no-duplicate-type-constituents': 'error',
            '@typescript-eslint/no-dynamic-delete': 'error',
            '@typescript-eslint/no-explicit-any': [
                'error',
                { fixToUnknown: true },
            ],
            '@typescript-eslint/no-extra-non-null-assertion': 'warn',
            '@typescript-eslint/no-extraneous-class': 'error',
            '@typescript-eslint/no-floating-promises': 'error',
            '@typescript-eslint/no-for-in-array': 'error',
            '@typescript-eslint/no-import-type-side-effects': 'error',
            '@typescript-eslint/no-inferrable-types': 'warn',
            '@typescript-eslint/no-invalid-void-type': 'error',
            '@typescript-eslint/no-meaningless-void-operator': 'error',
            '@typescript-eslint/no-misused-new': 'error',
            '@typescript-eslint/no-misused-promises': 'error',
            '@typescript-eslint/no-mixed-enums': 'error',
            '@typescript-eslint/no-namespace': 'warn',
            '@typescript-eslint/no-non-null-asserted-nullish-coalescing':
                'error',
            '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
            '@typescript-eslint/no-redundant-type-constituents': 'error',
            '@typescript-eslint/no-require-imports': 'error',
            '@typescript-eslint/no-shadow': [
                'warn',
                {
                    builtinGlobals: true,
                    hoist: 'all',
                    allow: [],
                    ignoreOnInitialization: false,
                    ignoreTypeValueShadow: true,
                    ignoreFunctionTypeParameterNameValueShadow: true,
                },
            ],
            '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'warn',
            '@typescript-eslint/no-unnecessary-condition': [
                'warn',
                { allowConstantLoopConditions: 'only-allowed-literals' },
            ],
            '@typescript-eslint/no-unnecessary-qualifier': 'warn',
            '@typescript-eslint/no-unnecessary-type-arguments': 'warn',
            '@typescript-eslint/no-unnecessary-type-assertion': 'warn',
            '@typescript-eslint/no-unnecessary-type-constraint': 'error',
            '@typescript-eslint/no-unsafe-argument': 'warn',
            '@typescript-eslint/no-unsafe-assignment': 'error',
            '@typescript-eslint/no-unsafe-call': 'error',
            '@typescript-eslint/no-unsafe-declaration-merging': 'error',
            '@typescript-eslint/no-unsafe-enum-comparison': 'error',
            '@typescript-eslint/no-unsafe-member-access': 'error',
            '@typescript-eslint/no-unsafe-return': 'error',
            '@typescript-eslint/no-useless-empty-export': 'warn',
            '@typescript-eslint/non-nullable-type-assertion-style': 'warn',
            '@typescript-eslint/only-throw-error': [
                'error',
                { allowThrowingAny: false, allowThrowingUnknown: false },
            ],
            '@typescript-eslint/prefer-as-const': 'error',
            '@typescript-eslint/prefer-for-of': 'error',
            '@typescript-eslint/prefer-function-type': 'warn',
            '@typescript-eslint/prefer-nullish-coalescing': 'warn',
            '@typescript-eslint/prefer-optional-chain': 'warn',
            '@typescript-eslint/prefer-promise-reject-errors': 'error',
            '@typescript-eslint/prefer-reduce-type-parameter': 'warn',
            '@typescript-eslint/prefer-readonly-parameter-types': 'off',
            '@typescript-eslint/prefer-return-this-type': 'error',
            '@typescript-eslint/prefer-string-starts-ends-with': 'warn',
            '@typescript-eslint/promise-function-async': 'warn',
            '@typescript-eslint/require-array-sort-compare': 'error',
            '@typescript-eslint/restrict-plus-operands': [
                'warn',
                {
                    allowAny: false,
                    allowBoolean: false,
                    allowNullish: false,
                    allowNumberAndString: false,
                    allowRegExp: false,
                    skipCompoundAssignments: false,
                },
            ],
            '@typescript-eslint/restrict-template-expressions': [
                'warn',
                {
                    allowNumber: true,
                    allowBoolean: true,
                    allowAny: false,
                    allowNullish: true,
                    allowRegExp: false,
                    allowNever: false,
                    allowArray: false,
                },
            ],
            '@typescript-eslint/strict-boolean-expressions': 'warn',
            '@typescript-eslint/switch-exhaustiveness-check': [
                'error',
                { requireDefaultForNonUnion: true },
            ],
            '@typescript-eslint/triple-slash-reference': 'warn',
            '@typescript-eslint/default-param-last': 'error',
            '@typescript-eslint/dot-notation': 'warn',
            '@typescript-eslint/no-array-constructor': 'error',
            '@typescript-eslint/no-empty-function': 'warn',
            '@typescript-eslint/no-implied-eval': 'error',
            '@typescript-eslint/no-loop-func': 'error',
            '@typescript-eslint/no-loss-of-precision': 'off', // deprecated in typescript-eslint v6, use no-loss-of-precision rule instead
            '@typescript-eslint/no-unused-expressions': 'error',
            '@typescript-eslint/no-unused-vars': [
                'warn',
                {
                    args: 'all',
                    argsIgnorePattern: '^_',
                    caughtErrors: 'all',
                    caughtErrorsIgnorePattern: '^_',
                    destructuredArrayIgnorePattern: '^_',
                    varsIgnorePattern: '^_',
                    ignoreRestSiblings: true,
                },
            ],
            '@typescript-eslint/no-use-before-define': 'warn',
            '@typescript-eslint/no-useless-constructor': 'error',
            '@typescript-eslint/require-await': 'error',
            // Error cause
            'error-cause/no-swallowed-error-cause': 'warn',
            // No relative import paths
            'no-relative-import-paths/no-relative-import-paths': 'error',
            // Perfectionist rules
            'perfectionist/sort-array-includes': [
                'warn',
                { type: 'natural', partitionByNewLine: true },
            ],
            'perfectionist/sort-classes': ['warn', { type: 'natural' }],
            'perfectionist/sort-exports': [
                'warn',
                {
                    type: 'natural',
                },
            ],
            'perfectionist/sort-interfaces': [
                'warn',
                {
                    type: 'natural',
                    groups: ['required-property', 'optional-property'],
                },
            ],
            'perfectionist/sort-maps': ['warn', { type: 'natural' }],
            'perfectionist/sort-objects': [
                'warn',
                {
                    type: 'natural',
                    partitionByNewLine: true,
                },
            ],
            'perfectionist/sort-object-types': [
                'warn',
                {
                    type: 'natural',
                    groups: ['required-property', 'optional-property'],
                },
            ],
            'perfectionist/sort-sets': ['warn', { type: 'natural' }],
            'perfectionist/sort-switch-case': [
                'warn',
                {
                    type: 'natural',
                },
            ],
            'perfectionist/sort-union-types': [
                'warn',
                {
                    type: 'natural',
                },
            ],
        },
    },
    {
        plugins: { '@eslint/json': eslintJsonPlugin },
        languageOptions: {
            parser: jsoncParser,
        },
        files: ['**/*.json'],
        ignores: [
            '**/node_modules/**',
            '**/dist/**',
            '**/build/**',
            'package-lock.json',
            'tsconfig.json',
            'tsconfig.*.json',
            '.vscode/*.json',
        ],
        rules: {
            '@eslint/json/no-duplicate-keys': 'error',
            '@eslint/json/no-empty-keys': 'warn',
            '@eslint/json/no-unsafe-values': 'error',
            '@eslint/json/no-unnormalized-keys': 'error',
            '@eslint/json/sort-keys': 'off', // doesnt auto-fix it
            '@eslint/json/top-level-interop': 'error',
        },
    },
    {
        files: ['package.json'],
        plugins: {
            'package-json': packageJson,
        },
        rules: {
            'package-json/no-empty-fields': 'warn',
            'package-json/no-redundant-files': 'error',
            'package-json/order-properties': 'warn',
            'package-json/repository-shorthand': 'error',
            'package-json/require-author': 'warn',
            'package-json/require-description': 'error',
            'package-json/require-engines': 'off',
            'package-json/require-files': 'off',
            'package-json/require-keywords': 'off',
            'package-json/require-name': 'error',
            'package-json/require-type': 'error',
            'package-json/require-types': 'off',
            'package-json/require-version': 'warn',
            'package-json/restrict-dependency-ranges': 'off',
            'package-json/sort-collections': 'warn',
            'package-json/unique-dependencies': 'error',
            'package-json/valid-local-dependency': 'error',
            'package-json/valid-name': 'error',
            'package-json/valid-package-definition': 'warn',
            'package-json/valid-repository-directory': 'warn',
            'package-json/valid-version': 'error',
        },
    },

    {
        plugins: { '@eslint/json': eslintJsonPlugin },
        files: ['**/*.json5'],
        languageOptions: {
            parser: jsoncParser,
            allowTrailingCommas: true,
        },
        rules: {
            '@eslint/json/no-duplicate-keys': 'error',
            '@eslint/json/no-empty-keys': 'warn',
            '@eslint/json/no-unsafe-values': 'error',
            '@eslint/json/no-unnormalized-keys': 'error',
            '@eslint/json/sort-keys': 'off', // doesnt auto-fix it
            '@eslint/json/top-level-interop': 'error',
        },
    },
    {
        plugins: { '@eslint/json': eslintJsonPlugin },
        files: ['**/*.jsonc', '.vscode/*.json'],
        languageOptions: {
            parser: jsoncParser,
        },
        rules: {
            '@eslint/json/no-duplicate-keys': 'error',
            '@eslint/json/no-empty-keys': 'warn',
            '@eslint/json/no-unsafe-values': 'error',
            '@eslint/json/no-unnormalized-keys': 'error',
            '@eslint/json/sort-keys': 'off', // doesnt auto-fix it
            '@eslint/json/top-level-interop': 'error',
        },
    },
]);
